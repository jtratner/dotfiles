set nocompatible  " be iMproved
set nocp
call pathogen#infect()
syntax on
filetype plugin indent on
call pathogen#infect()                     " Only way to get the helptags to install, don't know why
call pathogen#helptags()                   "
source $VIMRUNTIME/macros/matchit.vim      " not on by default for some reason


"TODO: make a help doc for all this
" <leader> mapping
let mapleader=","             " change the leader to be a comma vs slash

" map semicolon to ':' so you don't have to press 'shift-;' for each command.
" Faster! Smarter! Woo!
nnoremap ; :

" Centralize backups, swapfiles and undo historu
set backupdir=~/.dotfiles/vim/vim.symlink/backups//
set directory=~/.dotfiles/vim/vim.symlink/swaps//
if exists("&undofile")
    set undofile
endif
if exists("&undodir")
    " this is especially neat, because it lets you have undo persistence
    set undodir=$~/.dotfiles/vim/vim.symlink/swaps//
endif

" Seriously, guys. It's not like :W is bound to anything anyway.
command! W :w


" Paste from clipboard
map <leader>p "+p
map <leader>y "+y

" Quit window on <leader>q
nnoremap <leader>q :q<CR>
"
" hide matches on <leader>space
nnoremap <leader><space> :nohlsearch<cr>

" Remove trailing whitespace on <leader>S
nnoremap <leader>S :%s/\s\+$//<cr>:let @/=''<CR>

" " Select the item in the list with enter
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Edit/Reload Vimrc
map <silent> <leader>ev :edit ~/.vimrc<CR>
map <silent> <leader>sv :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Hide buffer on H
command! H :hide<CR>
map <silent> <leader>H :hide<CR>

" open/close the quickfix window
nmap <leader>c :copen<CR>
nmap <leader>cc :cclose<CR>

" for when we forget to use sudo to open/edit a file
cmap w!! w !sudo tee % >/dev/null

" ctrl-jklm  changes to that split
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" and lets make these all work in insert mode too ( <C-O> makes next cmd
"  happen as if in command mode )
imap <C-W> <C-O><C-W>


" sudo write this
cmap W! w !sudo tee % >/dev/null

" Display Formatting
fu! SplitScroll()
    :wincmd v
    :wincmd w
    execute "normal! \<C-d>"
    :set scrollbind
    :wincmd w
    :set scrollbind
endfu

nmap <leader>sb :call SplitScroll()<CR>
"<CR><C-w>l<C-f>:set scrollbind<CR>

command! ColorColumn  :set colorcolumn=+0 "sets colorbar at textwidth
command! NoColorColumn :set colorcolumn=0 "sets colorbar just past textwidth

"Format text + wrapping
"
" important: vip - selects the entire paragraph
function! ChangeFormat(new_tw,...)
    " store all the old settings in a local buffer variable
    " don't store if they've already been set, as those are the
    " originals TODO: change this to an object instead
    if a:0 > 0
        let verb=a:1
    else
        let verb=0
    endif
    if !exists("b:thedict")
       let b:thedict = {"oldtw":&tw,"oldfo":&fo,"oldcc":&colorcolumn}
    endif
    " set new textwidth
    :exe ":set textwidth=".a:new_tw." fo+=t"
    :ColorColumn
    if verb
        :echo "textwidth ".a:new_tw.", autowrapping on, go edit."
    endif
endfunction

" enables smart comment formatting (like wrapping new lines with tw and
" adding comment string at beginning of wrapped lines.
" Pass a text_width and it will use ChangeFormat to store previous
" settings and add color bar
function! SetCommentFormat(...)
    " this stores the current comment format
    if a:0 > 0
        call ChangeFormat(a:1)
    endif
    :exe ":set fo+=roq"
endfunction

function! RestoreFormat()
    if exists("b:thedict")
        :exe ":set textwidth=".b:thedict["oldtw"]." fo=".b:thedict["oldfo"]." colorcolumn=".b:thedict["oldcc"]
    else
        :echo "couldn't find old vars, turning it off"
        :set textwidth=0
        :set fo+=t
        :NoColorColumn
    endif
    :echo "reset to defaults - autowrapping off"
        unlet! b:thedict
endfunction

" turn on autowrapping for comments
" 'ec' - edit comment, 'en' - edit normal, 'ed' - edit done
" TODO: figure out how to get this to start automatically within a comment
" (e.g. I type '#' it starts wrapping then as soon as I'm done with comment
" writing it goes back. One possible option: map '#' to my comment function
" and then have a short function that deletes the current line of text. Dunno,
" seems kinda overkill.
map <leader>ec :call SetCommentFormat()<CR>:call ChangeFormat(72)<CR>
map <leader>en :call ChangeFormat(78)<CR>
map <leader>ed :call RestoreFormat()<CR>

" simplify block formatting
"  (suggestion from nvie.com site...my muscle memory is to gq now
" though)
nmap Q gqap
vmap Q gq

" basically, use this if the highlighting starts to get out of control
command! LessBadSpellBad :set hi SpellBad term=underline ctermfg=12 ctermbg=bg gui=undercurl guisp=Red
" sets it to only underline and everything else normal
command! LeastBadSpellBad :set hi SpellBad term=underline ctermfg=fg ctermbg=bg gui=undercurl guisp=Red

" vim editing
command! Pos :echo col('.')

" real programmers use cat to code, I settle for the following:
" (turns on/off autocomplete and indentation for the full experience)
command! L33t exe "normal! :AcpDisable<CR>:filetype indent off<CR>:filetype plugin indent off"
command! GGnore exe "normal! :AcpEnable<CR>:filetype indent on<CR>:filetype plugin indent on"
" ================
" Basic Settings
" ================
"
syntax on                     " syntax highlighing
filetype on                   " try to detect filetypes
filetype plugin indent on     " enable loading indent file for filetype
set number                    " Display line numbers
set numberwidth=1             " using only 1 column (and 1 space) while possible
set background=dark           " We are using dark background in vim
set title                     " show title in console title bar
set wildmenu                  " Menu completion in command mode on <Tab>
set wildmode=full             " <Tab> cycles between all matching choices.
set encoding=utf-8            " Necessary for powerline to show unicode glyphs
set lazyredraw                " According to gitv.txt - stops Vim from
                              "   redrawing the screen and thereby results in
                              "   much smoother looking plugins
set hidden                    " allow switching buffers without unloading, etc
" don't bell or blink
set noerrorbells
set vb t_vb=
set novisualbell

" Ignore these files when completing
set wildignore+=*.o,*.obj,.git,*.pyc
set wildignore+=eggs/**
set wildignore+=*.egg-info/**

set grepprg=ack         " replace the default grep program with ack

""" Insert completion
" don't select first item, follow typing in autocomplete
set completeopt=menuone,longest,preview
set pumheight=6             " Keep a small completion window


let g:acp_completeoptPreview=1

""" Moving Around/Editing
set cursorline              " have a line indicate the cursor location
set ruler                   " show the cursor position all the time
set nostartofline           " Avoid moving cursor to BOL when jumping around
set virtualedit=block       " Let cursor move past the last char in <C-v> mode
set scrolloff=3             " Keep 3 context lines above and below the cursor
set backspace=2             " Allow backspacing over autoindent, EOL, and BOL
set showmatch               " Briefly jump to a paren once it's balanced
set nowrap                  " don't wrap text
set linebreak               " don't wrap textin the middle of a word
set autoindent              " always set autoindenting on
set smartindent             " use smart indent if there is no indent file
set tabstop=4               " <tab> inserts 4 spaces
set shiftwidth=4            " but an indent level is 2 spaces wide.
set softtabstop=4           " <BS> over an autoindent deletes both spaces.
set expandtab               " Use spaces, not tabs, for autoindent/tab key.
set shiftround              " rounds indent to a multiple of shiftwidth
set matchpairs+=<:>         " show matching <> (html mainly) as well
set foldmethod=indent       " allow us to fold on indents
set foldlevel=99            " don't fold by default

" don't outdent hashes (see :help smartindent for more on this)
inoremap # X#

" This is commented out to use ConqueTerm
" " close preview window automatically when we move around
" augroup cursor
"     au!
"         autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
"         autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" augroup END

" make tab completion context sensitive
let g:SuperTabDefaultCompletionType = "context"
let g:snips_author = "Jeffrey Tratner" "change this to your own name!
" set ctrlp to default to MRU files
let g:ctrlp_cmd = "CtrlPMRUFiles"
"""" Reading/Writing
set noautowrite             " Never write a file unless I request it.
set noautowriteall          " NEVER.
set noautoread              " Don't automatically re-read changed files.
set modeline                " Allow vim options to be embedded in files;
set modelines=5             " they must be within the first or last 5 lines.
set ffs=unix,dos,mac        " Try recognizing dos, unix, and mac line endings.

"""" Messages, Info, Status
set ls=2                    " allways show status line
set vb t_vb=                " Disable all bells.  I hate ringing/flashing.
set confirm                 " Y-N-C prompt if closing with unsaved changes.
set showcmd                 " Show incomplete normal mode commands as I type.
set report=0                " : commands always print changed line count.
set shortmess+=a            " Use [+]/[RO]/[w] for modified/readonly/written.
set ruler                   " Show some info, even without statuslines.
set laststatus=2            " Always show statusline, even if only 1 window.
set statusline=[%l,%v\ %P%M]\ %f\ %r%h%w\ (%{&ff})\ %{fugitive#statusline()}

" displays tabs with :set list & displays when a line runs off-screen
set listchars=tab:>-,eol:$,trail:-,precedes:<,extends:>
set list

""" Searching and Patterns
set ignorecase              " Default to using case insensitive searches,
set smartcase               " unless uppercase letters are used in the regex.
set smarttab                " Handle tabs more intelligently
set hlsearch                " Highlight searches by default.
set incsearch               " Incrementally search while typing a /regex


"""" Display
" Setting it this way so I can change fonts by resolution, etc
let g:UMono="Ubuntu\\ Mono"
let g:Menlo="Menlo\\ for\\ Powerline"
let g:Inconsolata="Inconsolata-dz\\ For\\ Powerline"
let g:Bitstream="Bitstream\\ Vera\\ Sans\\ Mono\\ for\\ Powerline"
let g:AnonymousPro="Anonymous\\ Pro\\ for\\ Powerline"
let g:FontNames = ["UMono","Menlo","Inconsolata","Bitstream","AnonymousPro"]
let g:FontChoices = [g:UMono,g:Menlo,g:Inconsolata,g:Bitstream,g:AnonymousPro]
command! PatchedFonts :echo s:FontNames
let g:DefaultFont=g:UMono

function! SetFont(size, ...)
    if a:0 > 0                  "a:0 is defined as number of *extra* arguments
        let fontface=g:{a:1}
    else
        let fontface=g:DefaultFont
    endif
    let newfont=fontface.":h".a:size
    :exe ":set guifont=".newfont
endfunction

command! -nargs=* SetFont :call SetFont(<f-args>)
if has("gui_running")
    colorscheme xoria256
    " keep menubar only
    set guioptions=m
    set novisualbell
    " set powerline to fancy
    let g:Powerline_symbols="fancy"
else
    " set powerline to normal instead (otherwise superugly)
    colorscheme xoria256
endif

if has("gui_macvim") && !exists("g:MacVimSettingsLoaded")
    let g:MacVimSettingsLoaded = 1
    colorscheme xoria256
    call SetFont(18,"UMono")
    let g:Powerline_symbols="fancy"
endif

" =================
" Plugin Settings
" =================


"
" ===============================================
" AutoComplPop - useful keyword completion, etc
" ===============================================

let g:acp_behaviorKeywordLength = 4 " make AutoComplPop a little less
                                    " aggressive
let g:acp_enableAtStartup = 0 " set to 1 to enable at startup

" =============================================
" Gitv - git + gitk + diff all in vim -- yay!
" =============================================

" make it easier to write git commands :P
command! -nargs=* MyGitv call MyGitv(<f-args>)

" check out :help gitv-misc for more info
" wrapper for gitv's neat open-gitcommand-function
function! MyGitv(cmd, ...)
    if a:0 == 0
        let window = 'new'
    elseif a:0 == 1
        let window = a:1
    else
        echoerr "MyGitV takes 2 and only 2 arguments"
    endif
    call Gitv_OpenGitCommand(a:cmd,window)
endfunction

" =========
" Syntastic
" =========

let g:syntastic_mode_map = { 'mode': 'passive',
            \ 'active_filetypes' : [],
            \ 'passive_filetypes': ['c', 'python', 'rst'] }

" ==========================================================
" tComment
" ==========================================================
"" note that its commands are:
"gc{motion}   :: Toggle comments (for small comments within one line
"                    the &filetype_inline style will be used, if
"                    defined)
"    gcc          :: Toggle comment for the current line
"    gC{motion}   :: Comment region
"    gCc          :: Comment the current line
" also uses <C-_> and <leader>_
"

" ==========================================================
" Powerline
" ==========================================================
" Note that you need to have a patched font to use the fancy encodings (search
" for has(gui_running) for more
let g:Powerline_stl_path_style="short"
" change to set color scheme
"let g:Powerline_colorscheme="default"
" change to set powerline theme
"let g:Powerline_theme="default"
"
" ==========================================================
" tasklist
" ==========================================================
" Toggle the tasklist
map <leader>td <Plug>TaskList

" ==========================================================
" pep8
" ==========================================================
" Run pep8
let g:pep8_map='<leader>8'

" Don't let pyflakes use the quickfix window
let g:pyflakes_use_quickfix = 0

" ==========================================================
" Command-T
" ==========================================================
" Run command-t file search
map <leader>f :CommandT<CR>
"command -nargs=* C :CommandT

" ==========================================================
" Ack
" ==========================================================
" Ack searching
nmap <leader>a <Esc>:Ack!

" ==========================================================
" Gundo
" ==========================================================
" Load the Gundo window
map <leader>g :GundoToggle<CR>

" ==========================================================
" Rope
" ==========================================================
" Jump to the definition of whatever the cursor is on
map <leader>j :RopeGotoDefinition<CR>

" Rename whatever the cursor is on (including references to it)
map <leader>r :RopeRename<CR>

" ==========================================================
" Voom
" ==========================================================
" set Voom to know certain filetypes (keys are vim fts, values are voom modes)
let g:voom_ft_modes = {'markdown': 'markdown', 'python': 'python', 'rst': 'rest'}
map <F3> :Voomtoggle<CR>

" ===========
" Functions
" ===========


" Note, this will be eliminated in favor of either a plugin or move into main
" vimrc in the future. Not enough stuff here to necessarily justify separate
" placement.
"
" turn on and off color bar relative to textwidth
" TODO: fix for when textwidth is zero

" for these two functions, you can give them a number, and that will give it
" precedence
function! Boxline(char)
    :let charorder=['','=','-','"'] "make the indexes line up by starting with an empty string
    :let indices=['1','2','3']
    if index(indices,a:char) >=0
        :let character=charorder[a:char]
    else
        :let character=a:char
    endif
    :exe "normal mt"
    :let line=repeat(character, col('$')-1)
    :exe "normal O".line
    :exe "normal 't"
    :exe "normal o".line."\<Esc>o"
endfunction

function! Underline(char)
    :let charorder=['','=','-','"','^','*']
    :let indices=['1','2','3','4','5']
    if index(indices,a:char) >=0
        :let character=charorder[a:char]
    else
        :let character=a:char
    endif
    :let line=repeat(character, col('$')-1)
    :exe "normal o".line."\<Esc>o"
endfunction

" TODO: make this respect indentation, etc -- not sure how to do that yet
" TODO: make this work with numbers
" Shortcuts to add title and underlines for docstrings, etc
command! EqualTitle :call Boxline('=')
command! DashTitle :call Boxline('-')
command! -nargs=1 Title :call Boxline(<f-args>)
command! -nargs=1 Underline :call Underline(<f-args>)



" :DiffSaved to see diff of current buffer and version on disk
" From the dotfiles files of natw - https://bitbucket.org/natw/dotfiles/
function! DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call DiffWithSaved()
map <Leader>ds :DiffSaved<CR>

" disable arrow keys to force myself to adapt to hjkl - h/t to
" http://nvie.com/posts/how-i-boosted-my-vim
function! DisableArrowKeys()
    map <up> <nop>
    map <down> <nop>
    map <left> <nop>
    map <right> <nop>
endfunction

command! DisableArrowKeys :call DisableArrowKeys()

function! EnableArrowKeys()
    map <up> <up>
    map <down> <down>
    map <left> <left>
    map <right> <right>
endfunction

command! EnableArrowKeys :call EnableArrowKeys()

" From Josh Triplett (found on the nvie.com site above), a nice function to set
" spacing however you like
" TODO: add some more autocmds for sensible spacing defaults

function! Spaces(...)
    if a:0 == 1
        let l:width = a:1
    else
        let l:width = 4
    endif
    setlocal expandtab
    let &l:shiftwidth = l:width
    let &l:softtabstop = l:width
endfunction
command! T setlocal noexpandtab shiftwidth=8 softtabstop=0
command! -nargs=? S call Spaces(<args>)</args>

" ===================
" Filetype Settings
" ===================
"
" ==========
" Markdown
" ==========

" .md is markdown, not modula2, sorry modula2!
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=markdown
    au BufNewFile,BufRead *.md,*.markdown call ChangeFormat(80,0)
augroup END

" note: autocommands are separated into groups so that, even if you source
" your vimrc multiple times, you won't end up setting far too many
" autocommands
" ============
" Javascript
" ============
"
:augroup javascript
    au!
    " set coffeescript to compile on every save and pop up with resulting
    " code/errors.
    autocmd BufWritePost *.coffee silent CoffeeMake! -b | cwindow
    autocmd FileType coffee setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
    au BufRead *.js set makeprg=jslint\ %
:augroup END
" Mako/HTML
augroup makohtml
    au!
    autocmd BufNewFile,BufRead *.mako,*.mak,*.jinja2 setlocal ft=html.jinja
    autocmd FileType html,xhtml,xml,css,jade setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
augroup END

" =======
" Latex
" =======
"
let g:tex_flavor = 'latex' " sets default tex to latex instead of plainte

" Ruby
" NOTE: this requires all of: rspec, ConqueTerm, vim-ruby-conque
" Cmd-Shift-R for RSpec
nmap <silent> <D-R> :call RunRspecCurrentFileConque()<CR>
" Cmd-Shift-L for RSpec Current Line
nmap <silent> <D-L> :call RunRspecCurrentLineConque()<CR>
" Cmd-Shift-U for Last conque command
nmap <silent> <D-U> :call RunLastConqueCommand()<CR>

augroup ruby
    au!
    autocmd BufNewFile,BufRead Gemfile,Rakefile,Guardfile set filetype=ruby
    au FileType ruby,eruby set omnifunc=rubycomplete#Complete
    au FileType ruby,eruby set ai sw=2 sts=2 et
    " The following are from http://cstropz.net/2011/10/12/vim-ruby-auto-completion-and-supertab/
    au FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
    au FileType ruby,eruby let g:rubycomplete_rails = 1
    au FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
    au FileType ruby,eruby set fo+=roc
    au FileType ruby,eruby colo vividchalk
    " set ERB wrappers to use with surround
    au FileType ruby,eruby let b:surround_45 = "<% \r %>" " '-'
    au FileType ruby,eruby let b:surround_61 = "<%= \r %>" " '='
    au BufRead *.rb,*.erb,*.scss,*.coffee call Pl#Load()
augroup END
" Python
augroup python
    au!
    "au BufRead *.py compiler nose
    au FileType python set omnifunc=pythoncomplete#Complete
    au FileType python setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with
    au BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
    au FileType python set fo+=roc
    au FileType python call LoadPythonPath()
    " TODO: put LoadPythonPath into here instead of in vimrc
augroup END

" Fix the awful awful default pink color for completions
highlight Pmenu ctermbg=238 gui=bold

" New functions:
"
command! -range=% AddFoldMarkersToFxns :<line1>,<line2>s/^\(function!\s*[^{]*\)/\1 {{{2
function! CalcSpaces(lnum)
    let spaces = match(getline(a:lnum), "[^ ]")
    return (spaces / &shiftwidth)
endfunction

" Python-dependent vim functions

if !has("python")
    echo "Couldn't find Python features, not loading python script"
else
" Add the virtualenv's site-packages to vim path
py << EOF
import os.path
import sys
import vim
if 'VIRTUALENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF

" Load up virtualenv's vimrc if it exists
if filereadable($VIRTUAL_ENV . '/.vimrc')
    source $VIRTUAL_ENV/.vimrc
endif

" ================
" LoadPythonPath
" ================
"

" autoload function to load and unload python path (thereby enhancing
" autocomplete possibilities, etc. Note that this may be unnecessary if you
" have other Vim plugins installed. I'm not sure :P)


" If you want to autoload the python path any time you open a .py file, you
" can do use this function (note that it will not reload the python path every
" time, only if it hasn't been loaded already)

function! GetPythonPath()
    if !exists("g:PythonPathLoaded")
        call LoadPythonPath()
        return
    elseif g:PythonPathLoaded
        return
    else
        call LoadPythonPath()
    endif
endfunction

" Load Python Path - allows hovering over module name and opening file in vim
function! LoadPythonPath()
py <<EOF
# load PYTHONPATH into vim, this lets you hover over a module name
# and type 'gf' (for goto file) and open that file in vim. Useful
# and easier than rope for simple tasks
import os.path
import sys
import vim
for p in sys.path:
    if os.path.isdir(p):
        vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
EOF

    let g:PythonPathLoaded = 1

endfunction

"Unfortunately, this also seems to slow down autocomplete, so I only want to
"load/unload when *I* choose
function! UnloadPythonPath()

py <<EOF
    # load PYTHONPATH into vim, this lets you hover over a module name
    # and type 'gf' (for goto file) and open that file in vim. Useful
    # and easier than rope for simple tasks
for p in sys.path:
    if os.path.isdir(p):
        vim.command(r"set path-=%s" % (p.replace(" ", r"\ ")))
EOF

    let g:PythonPathLoaded = 0
endfunction

let g:GAEDir="~/google_appengine/"
let g:GAEPythonDir="~/google_appengine/lib/"
function! LoadGAEPath()

py <<EOF
# load GoogleAppEngine into vim, this lets you hover over a module name
# and type 'gf' (for goto file) and open that file in vim. Useful
# and easier than rope for simple tasks
import os.path
import sys
import vim
gae_dir = "/home/jtratner/google_appengine/lib"
filelist = map(lambda x: os.path.join(gae_dir, x), os.listdir(gae_dir))

for p in filelist:
    if os.path.isdir(p):
        vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
EOF

    let g:GAEPathLoaded = 1
endfunction
function! UnLoadGAEPath()

py <<EOF
# unload GAppEnginePATH into vim, this lets you hover over a module name
# and type 'gf' (for goto file) and open that file in vim. Useful
# and easier than rope for simple tasks
import os.path
import sys
import vim
gae_dir = "/home/jtratner/google_appengine/lib"
filelist = map(lambda x: os.path.join(gae_dir, x), os.listdir(gae_dir))

for p in filelist:
    if os.path.isdir(p):
        vim.command(r"set path-=%s" % (p.replace(" ", r"\ ")))
EOF

    let g:GAEPathLoaded = 1
endfunction
endif
